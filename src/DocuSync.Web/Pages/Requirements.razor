@page "/requirements"
@using DocuSync.Application.Services.Interfaces
@using DocuSync.Domain.Entities
@using DocuSync.Domain.Repositories
@using DocuSync.Web.Components.Documents
@using Microsoft.AspNetCore.Components.Web
@inject IRequirementService RequirementService
@inject IDocumentService DocumentService

<PageTitle>Document Requirements</PageTitle>

<div class="container mx-auto p-4">
    <h1 class="text-2xl mb-4">Document Requirements</h1>
    
    @if (_requirements == null)
    {
        <p>Loading...</p>
    }
    else
    {
        <div class="overflow-x-auto">
            <table class="min-w-full bg-white">
                <thead>
                    <tr class="bg-gray-100">
                        <th class="px-4 py-2">Document Type</th>
                        <th class="px-4 py-2">Due Date</th>
                        <th class="px-4 py-2">Status</th>
                        <th class="px-4 py-2">Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var req in _requirements)
                    {
                        <tr>
                            <td class="border px-4 py-2">@req.DocumentType.Name</td>
                            <td class="border px-4 py-2">@req.DueDate.ToShortDateString()</td>
                            <td class="border px-4 py-2">@req.Status</td>
                            <td class="border px-4 py-2">
                                <DocumentUpload RequirementId="@req.Id" OnUploadComplete="RefreshList" />
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</div>

@code {
    private IEnumerable<Requirement> _requirements;
    private string _error;

    protected override async Task OnInitializedAsync()
    {
        await RefreshList();
    }

    private async Task RefreshList()
    {
        try
        {
            var result = await RequirementService.GetActiveRequirementsAsync();
            if (result.IsSuccess)
            {
                _requirements = result.Data;
                StateHasChanged();
            }
            else
            {
                _error = result.Error;
            }
        }
        catch (Exception ex)
        {
            _error = "Failed to load requirements";
        }
    }
}