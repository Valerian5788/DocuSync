@page "/admin/clients"
@using DocuSync.Application.Services.Interfaces
@using Microsoft.AspNetCore.Authorization
@using MudBlazor
@using DocuSync.Application.Authorization.Constants
@using DocuSync.Domain.Entities
@using DocuSync.Domain.Entities.Enums
@using DocuSync.Web.Components.Admin.Models
@using DocuSync.Web.Components.Admin.Dialogs
@attribute [Authorize(Policy = Policies.IsAdmin)]
@inject IClientService ClientService

<PageTitle>Client Management - DocuSync</PageTitle>

<MudContainer>
    <MudPaper Class="pa-4">
        <MudStack>
            <MudText Typo="Typo.h5">Client Management</MudText>
            <MudButton Variant="Variant.Filled" Color="Color.Primary"
                       StartIcon="@Icons.Material.Filled.Add"
                       OnClick="AddClient">
                Add Client
            </MudButton>

            <MudTable Items="@_clients" Loading="@_loading">
                <HeaderContent>
                    <MudTh>Name</MudTh>
                    <MudTh>Email</MudTh>
                    <MudTh>Status</MudTh>
                    <MudTh>Actions</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd>@context.Name</MudTd>
                    <MudTd>@context.HorusEmail</MudTd>
                    <MudTd>@context.Status</MudTd>
                    <MudTd>
                        <MudIconButton Icon="@Icons.Material.Filled.Edit"
                                       OnClick="@(() => EditClient(context))" />
                        <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                       Color="Color.Error"
                                       OnClick="@(() => DeleteClient(context))" />
                    </MudTd>
                </RowTemplate>
            </MudTable>
        </MudStack>
    </MudPaper>
</MudContainer>

@code {
    [Inject] private IDialogService DialogService { get; set; }
    [Inject] private ISnackbar Snackbar { get; set; }

    private bool _loading = false;
    private List<Client> _clients = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _loading = true;
            var result = await ClientService.GetAllAsync();
            if (result.IsSuccess)
            {
                _clients = result.Data.ToList();
            }
            else
            {
                Snackbar.Add(result.Error, Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add("An unexpected error occurred", Severity.Error);
        }
        finally
        {
            _loading = false;
        }
    }

    private async Task AddClient()
    {
        var parameters = new DialogParameters
        {
            { "Model", new ClientViewModel() }
        };

        var dialog = await DialogService.ShowAsync<EditClientDialog>("Add Client", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            try
            {
                var model = (ClientViewModel)result.Data;
                var serviceResult = await ClientService.CreateAsync(model.Name, model.HorusEmail);

                if (serviceResult.IsSuccess)
                {
                    await RefreshClients();
                    Snackbar.Add("Client added successfully", Severity.Success);
                }
                else
                {
                    Snackbar.Add(serviceResult.Error, Severity.Error);
                }
            }
            catch (Exception ex)
            {
                Snackbar.Add("An unexpected error occurred", Severity.Error);
            }
        }
    }

    private async Task RefreshClients()
    {
        var result = await ClientService.GetAllAsync();
        if (result.IsSuccess)
        {
            _clients = result.Data.ToList();
        }
    }

    private async Task EditClient(Client client)
    {
        var model = new ClientViewModel
            {
                Name = client.Name,
                HorusEmail = client.HorusEmail,
                Status = client.Status
            };

        var parameters = new DialogParameters { { "Model", model } };
        var dialog = await DialogService.ShowAsync<EditClientDialog>("Edit Client", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            try
            {
                var updatedModel = (ClientViewModel)result.Data;
                var serviceResult = await ClientService.UpdateAsync(
                    client.Id,
                    updatedModel.Name,
                    updatedModel.HorusEmail,
                    updatedModel.Status
                );

                if (serviceResult.IsSuccess)
                {
                    await RefreshClients();
                    Snackbar.Add("Client updated successfully", Severity.Success);
                }
                else
                {
                    Snackbar.Add(serviceResult.Error, Severity.Error);
                }
            }
            catch
            {
                Snackbar.Add("An unexpected error occurred", Severity.Error);
            }
        }
    }

    private async Task DeleteClient(Client client)
    {
        var confirmed = await DialogService.ShowMessageBox(
            "Delete Client",
            "Are you sure you want to delete this client?",
            yesText: "Delete",
            cancelText: "Cancel"
        );

        if (confirmed ?? false)
        {
            try
            {
                var result = await ClientService.DeleteAsync(client.Id);
                if (result.IsSuccess)
                {
                    await RefreshClients();
                    Snackbar.Add("Client deleted successfully", Severity.Success);
                }
                else
                {
                    Snackbar.Add(result.Error, Severity.Error);
                }
            }
            catch
            {
                Snackbar.Add("An unexpected error occurred", Severity.Error);
            }
        }
    }
}