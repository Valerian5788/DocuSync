@page "/admin/clients"
@using Microsoft.AspNetCore.Authorization
@using MudBlazor
@using DocuSync.Application.Authorization.Constants
@using DocuSync.Domain.Entities
@using DocuSync.Domain.Entities.Enums
@using DocuSync.Web.Components.Admin.Models
@using DocuSync.Web.Components.Admin.Dialogs
@attribute [Authorize(Policy = Policies.IsAdmin)]

<PageTitle>Client Management - DocuSync</PageTitle>

<MudContainer>
    <MudPaper Class="pa-4">
        <MudStack>
            <MudText Typo="Typo.h5">Client Management</MudText>
            <MudButton Variant="Variant.Filled" Color="Color.Primary"
                       StartIcon="@Icons.Material.Filled.Add"
                       OnClick="AddClient">
                Add Client
            </MudButton>

            <MudTable Items="@_clients" Loading="@_loading">
                <HeaderContent>
                    <MudTh>Name</MudTh>
                    <MudTh>Email</MudTh>
                    <MudTh>Status</MudTh>
                    <MudTh>Actions</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd>@context.Name</MudTd>
                    <MudTd>@context.HorusEmail</MudTd>
                    <MudTd>@context.Status</MudTd>
                    <MudTd>
                        <MudIconButton Icon="@Icons.Material.Filled.Edit"
                                       OnClick="@(() => EditClient(context))" />
                        <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                       Color="Color.Error"
                                       OnClick="@(() => DeleteClient(context))" />
                    </MudTd>
                </RowTemplate>
            </MudTable>
        </MudStack>
    </MudPaper>
</MudContainer>

@code {
    [Inject] private IDialogService DialogService { get; set; }
    [Inject] private ISnackbar Snackbar { get; set; }

    private bool _loading = false;
    private List<Client> _clients = new();

    private async Task AddClient()
    {
        var parameters = new DialogParameters
        {
            { "Model", new ClientViewModel() }
        };

        var dialog = await DialogService.ShowAsync<EditClientDialog>("Add Client", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            var model = (ClientViewModel)result.Data;
            // TODO: Save client
            Snackbar.Add("Client added successfully", Severity.Success);
        }
    }

    private async Task EditClient(Client client)
    {
        var model = new ClientViewModel
            {
                Name = client.Name,
                HorusEmail = client.HorusEmail,
                Status = client.Status
            };

        var parameters = new DialogParameters
        {
            { "Model", model }
        };

        var dialog = await DialogService.ShowAsync<EditClientDialog>("Edit Client", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            var updatedModel = (ClientViewModel)result.Data;
            // TODO: Update client
            Snackbar.Add("Client updated successfully", Severity.Success);
        }
    }

    private async Task DeleteClient(Client client)
    {
        var confirmed = await DialogService.ShowMessageBox(
            "Delete Client",
            "Are you sure you want to delete this client?",
            yesText: "Delete",
            cancelText: "Cancel");

        if (confirmed ?? false)
        {
            // TODO: Delete client
            Snackbar.Add("Client deleted successfully", Severity.Success);
        }
    }
}